version: "3.9"

services:
  logistic-package-api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: omp-template-api
    networks:
      - ompnw
    depends_on:
      postgres:
        condition: service_healthy  # ждем полного запуска Postgres
    #  kafka
    links:
      - postgres
    #      - kafka
    ports:
      - 8080:8080 # REST
      - 8082:8082 # gRPC
      - 9100:9100 # Metrics prometheus
      - 8000:8000 # Status prometheus
      - 40000:40000 # Debug port
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8000/live' ]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./migrations:/root/migrations
      - ./config.yml:/root/config.yml

  postgres:
    image: postgres:16.2
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    logging:
      driver: 'gelf'
      options:
        gelf-address: 'udp://localhost:12201'
        tag: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgresTest@123
      POSTGRES_DB: logistic_package_api
      APP_DB_USER: docker
      APP_DB_PASS: P@$$$$w0rd
    networks:
      - ompnw
    volumes:
      # - pgdata:/var/lib/postgresql/data
      - ./scripts/init-database.sh:/docker-entrypoint-initdb.d/init-database.sh

volumes:
  pgdata:
    driver: local
  esdata:
    driver: local
  mongodata:
    driver: local

networks:
  ompnw:
    driver: bridge
