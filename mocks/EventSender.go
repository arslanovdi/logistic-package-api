// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/arslanovdi/logistic-package-api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// EventSender is an autogenerated mock type for the EventSender type
type EventSender struct {
	mock.Mock
}

type EventSender_Expecter struct {
	mock *mock.Mock
}

func (_m *EventSender) EXPECT() *EventSender_Expecter {
	return &EventSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: pkg
func (_m *EventSender) Send(pkg *model.PackageEvent) error {
	ret := _m.Called(pkg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.PackageEvent) error); ok {
		r0 = rf(pkg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type EventSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - pkg *model.PackageEvent
func (_e *EventSender_Expecter) Send(pkg interface{}) *EventSender_Send_Call {
	return &EventSender_Send_Call{Call: _e.mock.On("Send", pkg)}
}

func (_c *EventSender_Send_Call) Run(run func(pkg *model.PackageEvent)) *EventSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.PackageEvent))
	})
	return _c
}

func (_c *EventSender_Send_Call) Return(_a0 error) *EventSender_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventSender_Send_Call) RunAndReturn(run func(*model.PackageEvent) error) *EventSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventSender creates a new instance of EventSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventSender {
	mock := &EventSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
