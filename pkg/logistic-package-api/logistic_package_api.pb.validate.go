// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logistic_package_api.proto

package logistic_package_api_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Package) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PackageMultiError, or nil if none found.
func (m *Package) ValidateAll() error {
	return m.validate(true)
}

func (m *Package) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 50 {
		err := PackageValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PackageValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PackageValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PackageValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Weight != nil {

		if m.GetWeight() <= 0 {
			err := PackageValidationError{
				field:  "Weight",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Updated != nil {

		if all {
			switch v := interface{}(m.GetUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PackageValidationError{
						field:  "Updated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PackageValidationError{
						field:  "Updated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PackageValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PackageMultiError(errors)
	}

	return nil
}

// PackageMultiError is an error wrapping multiple validation errors returned
// by Package.ValidateAll() if the designated constraints aren't met.
type PackageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageMultiError) AllErrors() []error { return m }

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

// Validate checks the field values on CreateRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRequestV1MultiError, or nil if none found.
func (m *CreateRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRequestV1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRequestV1ValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRequestV1ValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRequestV1MultiError(errors)
	}

	return nil
}

// CreateRequestV1MultiError is an error wrapping multiple validation errors
// returned by CreateRequestV1.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestV1MultiError) AllErrors() []error { return m }

// CreateRequestV1ValidationError is the validation error returned by
// CreateRequestV1.Validate if the designated constraints aren't met.
type CreateRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestV1ValidationError) ErrorName() string { return "CreateRequestV1ValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestV1ValidationError{}

// Validate checks the field values on CreateResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResponseV1MultiError, or nil if none found.
func (m *CreateResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	if len(errors) > 0 {
		return CreateResponseV1MultiError(errors)
	}

	return nil
}

// CreateResponseV1MultiError is an error wrapping multiple validation errors
// returned by CreateResponseV1.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseV1MultiError) AllErrors() []error { return m }

// CreateResponseV1ValidationError is the validation error returned by
// CreateResponseV1.Validate if the designated constraints aren't met.
type CreateResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseV1ValidationError) ErrorName() string { return "CreateResponseV1ValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseV1ValidationError{}

// Validate checks the field values on DeleteV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteV1RequestMultiError, or nil if none found.
func (m *DeleteV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPackageId() <= 0 {
		err := DeleteV1RequestValidationError{
			field:  "PackageId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteV1RequestMultiError(errors)
	}

	return nil
}

// DeleteV1RequestMultiError is an error wrapping multiple validation errors
// returned by DeleteV1Request.ValidateAll() if the designated constraints
// aren't met.
type DeleteV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteV1RequestMultiError) AllErrors() []error { return m }

// DeleteV1RequestValidationError is the validation error returned by
// DeleteV1Request.Validate if the designated constraints aren't met.
type DeleteV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteV1RequestValidationError) ErrorName() string { return "DeleteV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteV1RequestValidationError{}

// Validate checks the field values on DeleteV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteV1ResponseMultiError, or nil if none found.
func (m *DeleteV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteV1ResponseMultiError(errors)
	}

	return nil
}

// DeleteV1ResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteV1Response.ValidateAll() if the designated constraints
// aren't met.
type DeleteV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteV1ResponseMultiError) AllErrors() []error { return m }

// DeleteV1ResponseValidationError is the validation error returned by
// DeleteV1Response.Validate if the designated constraints aren't met.
type DeleteV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteV1ResponseValidationError) ErrorName() string { return "DeleteV1ResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteV1ResponseValidationError{}

// Validate checks the field values on GetV1Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetV1RequestMultiError, or
// nil if none found.
func (m *GetV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *GetV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPackageId() <= 0 {
		err := GetV1RequestValidationError{
			field:  "PackageId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetV1RequestMultiError(errors)
	}

	return nil
}

// GetV1RequestMultiError is an error wrapping multiple validation errors
// returned by GetV1Request.ValidateAll() if the designated constraints aren't met.
type GetV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetV1RequestMultiError) AllErrors() []error { return m }

// GetV1RequestValidationError is the validation error returned by
// GetV1Request.Validate if the designated constraints aren't met.
type GetV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetV1RequestValidationError) ErrorName() string { return "GetV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e GetV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetV1RequestValidationError{}

// Validate checks the field values on GetV1Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetV1ResponseMultiError, or
// nil if none found.
func (m *GetV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *GetV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetV1ResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetV1ResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetV1ResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetV1ResponseMultiError(errors)
	}

	return nil
}

// GetV1ResponseMultiError is an error wrapping multiple validation errors
// returned by GetV1Response.ValidateAll() if the designated constraints
// aren't met.
type GetV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetV1ResponseMultiError) AllErrors() []error { return m }

// GetV1ResponseValidationError is the validation error returned by
// GetV1Response.Validate if the designated constraints aren't met.
type GetV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetV1ResponseValidationError) ErrorName() string { return "GetV1ResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetV1ResponseValidationError{}

// Validate checks the field values on ListV1Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListV1RequestMultiError, or
// nil if none found.
func (m *ListV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOffset() <= 0 {
		err := ListV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := ListV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListV1RequestMultiError(errors)
	}

	return nil
}

// ListV1RequestMultiError is an error wrapping multiple validation errors
// returned by ListV1Request.ValidateAll() if the designated constraints
// aren't met.
type ListV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListV1RequestMultiError) AllErrors() []error { return m }

// ListV1RequestValidationError is the validation error returned by
// ListV1Request.Validate if the designated constraints aren't met.
type ListV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListV1RequestValidationError) ErrorName() string { return "ListV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e ListV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListV1RequestValidationError{}

// Validate checks the field values on ListV1Response with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListV1ResponseMultiError,
// or nil if none found.
func (m *ListV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPackages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListV1ResponseValidationError{
						field:  fmt.Sprintf("Packages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListV1ResponseValidationError{
						field:  fmt.Sprintf("Packages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListV1ResponseValidationError{
					field:  fmt.Sprintf("Packages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListV1ResponseMultiError(errors)
	}

	return nil
}

// ListV1ResponseMultiError is an error wrapping multiple validation errors
// returned by ListV1Response.ValidateAll() if the designated constraints
// aren't met.
type ListV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListV1ResponseMultiError) AllErrors() []error { return m }

// ListV1ResponseValidationError is the validation error returned by
// ListV1Response.Validate if the designated constraints aren't met.
type ListV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListV1ResponseValidationError) ErrorName() string { return "ListV1ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListV1ResponseValidationError{}

// Validate checks the field values on UpdateV1Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateV1RequestMultiError, or nil if none found.
func (m *UpdateV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateV1RequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateV1RequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateV1RequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateV1RequestMultiError(errors)
	}

	return nil
}

// UpdateV1RequestMultiError is an error wrapping multiple validation errors
// returned by UpdateV1Request.ValidateAll() if the designated constraints
// aren't met.
type UpdateV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateV1RequestMultiError) AllErrors() []error { return m }

// UpdateV1RequestValidationError is the validation error returned by
// UpdateV1Request.Validate if the designated constraints aren't met.
type UpdateV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateV1RequestValidationError) ErrorName() string { return "UpdateV1RequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateV1RequestValidationError{}

// Validate checks the field values on UpdateV1Response with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateV1ResponseMultiError, or nil if none found.
func (m *UpdateV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateV1ResponseMultiError(errors)
	}

	return nil
}

// UpdateV1ResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateV1Response.ValidateAll() if the designated constraints
// aren't met.
type UpdateV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateV1ResponseMultiError) AllErrors() []error { return m }

// UpdateV1ResponseValidationError is the validation error returned by
// UpdateV1Response.Validate if the designated constraints aren't met.
type UpdateV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateV1ResponseValidationError) ErrorName() string { return "UpdateV1ResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateV1ResponseValidationError{}
