// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: logistic_package_api.proto

package logistic_package_api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LogisticPackageApiService_CreatePackageV1_FullMethodName = "/logistic_package_api.v1.LogisticPackageApiService/CreatePackageV1"
	LogisticPackageApiService_DeletePackageV1_FullMethodName = "/logistic_package_api.v1.LogisticPackageApiService/DeletePackageV1"
	LogisticPackageApiService_GetPackageV1_FullMethodName    = "/logistic_package_api.v1.LogisticPackageApiService/GetPackageV1"
	LogisticPackageApiService_ListPackagesV1_FullMethodName  = "/logistic_package_api.v1.LogisticPackageApiService/ListPackagesV1"
	LogisticPackageApiService_UpdatePackageV1_FullMethodName = "/logistic_package_api.v1.LogisticPackageApiService/UpdatePackageV1"
)

// LogisticPackageApiServiceClient is the client API for LogisticPackageApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticPackageApiServiceClient interface {
	CreatePackageV1(ctx context.Context, in *CreatePackageRequestV1, opts ...grpc.CallOption) (*CreatePackageResponseV1, error)
	DeletePackageV1(ctx context.Context, in *DeletePackageV1Request, opts ...grpc.CallOption) (*DeletePackageV1Response, error)
	GetPackageV1(ctx context.Context, in *GetPackageV1Request, opts ...grpc.CallOption) (*GetPackageV1Response, error)
	ListPackagesV1(ctx context.Context, in *ListPackagesV1Request, opts ...grpc.CallOption) (*ListPackagesV1Response, error)
	UpdatePackageV1(ctx context.Context, in *UpdatePackageV1Request, opts ...grpc.CallOption) (*UpdatePackageV1Response, error)
}

type logisticPackageApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticPackageApiServiceClient(cc grpc.ClientConnInterface) LogisticPackageApiServiceClient {
	return &logisticPackageApiServiceClient{cc}
}

func (c *logisticPackageApiServiceClient) CreatePackageV1(ctx context.Context, in *CreatePackageRequestV1, opts ...grpc.CallOption) (*CreatePackageResponseV1, error) {
	out := new(CreatePackageResponseV1)
	err := c.cc.Invoke(ctx, LogisticPackageApiService_CreatePackageV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) DeletePackageV1(ctx context.Context, in *DeletePackageV1Request, opts ...grpc.CallOption) (*DeletePackageV1Response, error) {
	out := new(DeletePackageV1Response)
	err := c.cc.Invoke(ctx, LogisticPackageApiService_DeletePackageV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) GetPackageV1(ctx context.Context, in *GetPackageV1Request, opts ...grpc.CallOption) (*GetPackageV1Response, error) {
	out := new(GetPackageV1Response)
	err := c.cc.Invoke(ctx, LogisticPackageApiService_GetPackageV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) ListPackagesV1(ctx context.Context, in *ListPackagesV1Request, opts ...grpc.CallOption) (*ListPackagesV1Response, error) {
	out := new(ListPackagesV1Response)
	err := c.cc.Invoke(ctx, LogisticPackageApiService_ListPackagesV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticPackageApiServiceClient) UpdatePackageV1(ctx context.Context, in *UpdatePackageV1Request, opts ...grpc.CallOption) (*UpdatePackageV1Response, error) {
	out := new(UpdatePackageV1Response)
	err := c.cc.Invoke(ctx, LogisticPackageApiService_UpdatePackageV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticPackageApiServiceServer is the server API for LogisticPackageApiService service.
// All implementations must embed UnimplementedLogisticPackageApiServiceServer
// for forward compatibility
type LogisticPackageApiServiceServer interface {
	CreatePackageV1(context.Context, *CreatePackageRequestV1) (*CreatePackageResponseV1, error)
	DeletePackageV1(context.Context, *DeletePackageV1Request) (*DeletePackageV1Response, error)
	GetPackageV1(context.Context, *GetPackageV1Request) (*GetPackageV1Response, error)
	ListPackagesV1(context.Context, *ListPackagesV1Request) (*ListPackagesV1Response, error)
	UpdatePackageV1(context.Context, *UpdatePackageV1Request) (*UpdatePackageV1Response, error)
	mustEmbedUnimplementedLogisticPackageApiServiceServer()
}

// UnimplementedLogisticPackageApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogisticPackageApiServiceServer struct {
}

func (UnimplementedLogisticPackageApiServiceServer) CreatePackageV1(context.Context, *CreatePackageRequestV1) (*CreatePackageResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) DeletePackageV1(context.Context, *DeletePackageV1Request) (*DeletePackageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) GetPackageV1(context.Context, *GetPackageV1Request) (*GetPackageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) ListPackagesV1(context.Context, *ListPackagesV1Request) (*ListPackagesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackagesV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) UpdatePackageV1(context.Context, *UpdatePackageV1Request) (*UpdatePackageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageV1 not implemented")
}
func (UnimplementedLogisticPackageApiServiceServer) mustEmbedUnimplementedLogisticPackageApiServiceServer() {
}

// UnsafeLogisticPackageApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticPackageApiServiceServer will
// result in compilation errors.
type UnsafeLogisticPackageApiServiceServer interface {
	mustEmbedUnimplementedLogisticPackageApiServiceServer()
}

func RegisterLogisticPackageApiServiceServer(s grpc.ServiceRegistrar, srv LogisticPackageApiServiceServer) {
	s.RegisterService(&LogisticPackageApiService_ServiceDesc, srv)
}

func _LogisticPackageApiService_CreatePackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).CreatePackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticPackageApiService_CreatePackageV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).CreatePackageV1(ctx, req.(*CreatePackageRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_DeletePackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).DeletePackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticPackageApiService_DeletePackageV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).DeletePackageV1(ctx, req.(*DeletePackageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_GetPackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).GetPackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticPackageApiService_GetPackageV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).GetPackageV1(ctx, req.(*GetPackageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_ListPackagesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).ListPackagesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticPackageApiService_ListPackagesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).ListPackagesV1(ctx, req.(*ListPackagesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogisticPackageApiService_UpdatePackageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticPackageApiServiceServer).UpdatePackageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogisticPackageApiService_UpdatePackageV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticPackageApiServiceServer).UpdatePackageV1(ctx, req.(*UpdatePackageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LogisticPackageApiService_ServiceDesc is the grpc.ServiceDesc for LogisticPackageApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogisticPackageApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logistic_package_api.v1.LogisticPackageApiService",
	HandlerType: (*LogisticPackageApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackageV1",
			Handler:    _LogisticPackageApiService_CreatePackageV1_Handler,
		},
		{
			MethodName: "DeletePackageV1",
			Handler:    _LogisticPackageApiService_DeletePackageV1_Handler,
		},
		{
			MethodName: "GetPackageV1",
			Handler:    _LogisticPackageApiService_GetPackageV1_Handler,
		},
		{
			MethodName: "ListPackagesV1",
			Handler:    _LogisticPackageApiService_ListPackagesV1_Handler,
		},
		{
			MethodName: "UpdatePackageV1",
			Handler:    _LogisticPackageApiService_UpdatePackageV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistic_package_api.proto",
}
